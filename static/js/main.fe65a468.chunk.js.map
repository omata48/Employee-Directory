{"version":3,"sources":["components/Hero/index.js","components/Table/index.js","components/CardBtn/index.js","utils/API.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Hero","props","className","style","backgroundImage","children","Table","employees","map","employee","key","id","first_name","last_name","email","job_title","scope","CardBtn","onClick","name","data","Main","state","filterProperty","employeesMain","handleFilter","event","preventDefault","newArray","filter","includes","setState","sortCopy","arr","concat","sort","a","b","resetFilters","handleSort","sortedEmployees","users","API","this","data_value","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ukYAWeA,MARf,SAAcC,GACZ,OACE,yBAAKC,UAAU,mBAAmBC,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAAMG,gBAAf,OACvDH,EAAMI,WCyBEC,MA7Bf,SAAeL,GACX,IAAMM,EAAYN,EAAMM,UAAUC,KAAI,SAAAC,GAAQ,OAC1C,wBAAIC,IAAKD,EAASE,IACd,4BAAKF,EAASG,YACd,4BAAKH,EAASI,WACd,4BAAKJ,EAASK,OACd,4BAAKL,EAASM,eAItB,OACI,6BACI,2BAAOb,UAAU,qBACb,+BACI,4BACI,wBAAIc,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,eAGR,+BACKT,MCdNU,MARf,SAAiBhB,GACf,OACE,4BAAQiB,QAASjB,EAAMiB,QAAShB,UAAS,mBAAcD,EAAK,aACzDA,EAAMkB,O,OCCE,EACI,kBAAMC,GCyEVC,E,4MAxEXC,MAAQ,CACJC,eAAgB,GAChBC,cAAe,GACfjB,UAAW,I,EAQfkB,aAAe,SAAAC,GACXA,EAAMC,iBACN,IAAIC,EAAW,EAAKN,MAAMf,UAAUsB,QAAO,SAAApB,GACvC,OAAQA,EAASM,UAAWe,SAAS,eAEzC,EAAKC,SAAS,CACVxB,UAAWqB,K,EAInBI,SAAW,SAACC,GACR,OAAOA,EAAIC,SAASC,MAAK,SAACC,EAAGC,GAAJ,OACpBD,EAAExB,WAAayB,EAAEzB,WAAc,EAAMyB,EAAEzB,WAAawB,EAAExB,YAAe,EAAI,M,EAIlF0B,aAAe,SAAAZ,GACXA,EAAMC,iBACN,EAAKI,SAAS,CACVxB,UAAW,EAAKe,MAAME,iB,EAI9Be,WAAa,SAAAb,GACTA,EAAMC,iBACN,IAAMa,EAAkB,EAAKR,SAAS,EAAKV,MAAMf,WACjD,EAAKwB,SAAS,CACVxB,UAAWiC,K,kEA/Bf,IAAMC,EAAQC,IACdC,KAAKZ,SAAS,CAAEP,cAAeiB,EAAOlC,UAAWkC,M,+BAmCjD,OACI,6BACI,kBAAC,EAAD,KACI,kDACA,gEACA,kBAAC,EAAD,CACIvB,QAASyB,KAAKJ,WACdK,WAAW,aACXzB,KAAK,eACN,IACH,kBAAC,EAAD,CACID,QAASyB,KAAKlB,aACdmB,WAAW,WACXzB,KAAK,aAET,6BACA,6BACA,kBAAC,EAAD,CACID,QAASyB,KAAKL,aACdM,WAAW,QACXzB,KAAK,WAGb,kBAAC,EAAD,CAAOZ,UAAWoC,KAAKrB,MAAMf,iB,GApE1BsC,aCMJC,MARf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,QCKc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe65a468.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Hero(props) {\n  return (\n    <div className=\"hero text-center\" style={{ backgroundImage: `url(${props.backgroundImage})` }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Hero;\n","import React from \"react\";\n\nfunction Table(props) {\n    const employees = props.employees.map(employee => \n        <tr key={employee.id}>\n            <td>{employee.first_name}</td>\n            <td>{employee.last_name}</td>\n            <td>{employee.email}</td>\n            <td>{employee.job_title}</td>\n        </tr>\n    )\n\n    return (\n        <div>\n            <table className=\"table text-center\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">First Name</th>\n                        <th scope=\"col\">Last Name</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">Job Title</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {employees}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Table;","import React from \"react\";\n\nfunction CardBtn(props) {\n  return (\n    <button onClick={props.onClick} className={`card-btn ${props[\"data_value\"]}`}>\n      {props.name}\n    </button>\n  );\n}\n\nexport default CardBtn;\n","// import axios from \"axios\";\n// const BASEURL = \"https://my.api.mockaroo.com/employees?\"\n// const APIKEY = \"key=60b0c610\"\n\nimport data from \"../db/seed.json\"\n\nexport default {\n    generateUsers: () => data\n}","import React, { Component } from \"react\";\nimport Hero from \"../components/Hero\";\nimport Table from \"../components/Table\";\nimport CardBtn from \"../components/CardBtn\";\nimport API from \"../utils/API\";\n\nclass Main extends Component {\n\n    state = {\n        filterProperty: \"\",\n        employeesMain: [],\n        employees: [],\n    };\n\n    componentDidMount() {\n        const users = API.generateUsers()\n        this.setState({ employeesMain: users, employees: users })\n    };\n\n    handleFilter = event => {\n        event.preventDefault();\n        var newArray = this.state.employees.filter(employee => {\n            return (employee.job_title).includes(\"Engineer\")\n        })\n        this.setState({\n            employees: newArray\n        })\n    };\n\n    sortCopy = (arr) => {\n        return arr.concat().sort((a, b) =>\n            (a.first_name > b.first_name) ? 1 : ((b.first_name > a.first_name) ? -1 : 0)\n        )\n    }\n\n    resetFilters = event => {\n        event.preventDefault();\n        this.setState({\n            employees: this.state.employeesMain\n        })\n    }\n\n    handleSort = event => {\n        event.preventDefault();\n        const sortedEmployees = this.sortCopy(this.state.employees)\n        this.setState({\n            employees: sortedEmployees\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Hero>\n                    <h1>Employee Directory</h1>\n                    <h3>Here is a list of your employees</h3>\n                    <CardBtn\n                        onClick={this.handleSort}\n                        data_value=\"first-name\"\n                        name=\"First Name\"\n                    />{\" \"}\n                    <CardBtn\n                        onClick={this.handleFilter}\n                        data_value=\"engineer\"\n                        name=\"Engineer\"\n                    />\n                    <br />\n                    <br />\n                    <CardBtn\n                        onClick={this.resetFilters}\n                        data_value=\"reset\"\n                        name=\"Reset\" \n                    />\n                </Hero>\n                <Table employees={this.state.employees} />\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from \"./pages/Main\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}